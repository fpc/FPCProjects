#
# Makefile generated by fpcmake v1.00 [2000/09/27]
#

defaultrule: all

#####################################################################
# Autodetect OS (Linux or Dos or Windows NT)
# define inUnix when running under Unix (Linux,FreeBSD)
# define inWinNT when running under WinNT
#####################################################################

# We need only / in the path
override PATH:=$(subst \,/,$(PATH))

# Search for PWD and determine also if we are under linux
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(subst ;, ,$(PATH)))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(subst :, ,$(PATH)))))
ifeq ($(PWD),)
nopwd:
	@echo You need the GNU utils package to use this Makefile!
	@echo Get ftp://ftp.freepascal.org/pub/fpc/dist/go32v2/utilgo32.zip
	@exit
else
inUnix=1
endif
else
PWD:=$(firstword $(PWD))
endif

# Detect NT - NT sets OS to Windows_NT
# Detect OS/2 - OS/2 has OS2_SHELL defined
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
endif

# The extension of executables
ifdef inUnix
SRCEXEEXT=
else
SRCEXEEXT=.exe
endif

# The path which is searched separated by spaces
ifdef inUnix
SEARCHPATH=$(subst :, ,$(PATH))
else
SEARCHPATH=$(subst ;, ,$(PATH))
endif

# Base dir
ifdef PWD
BASEDIR:=$(shell $(PWD))
else
BASEDIR=.
endif

#####################################################################
# FPC version/target Detection
#####################################################################

# What compiler to use ?
ifndef FPC
# Compatibility with old makefiles
ifdef PP
FPC=$(PP)
else
FPC=ppc386
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)

# Target OS
ifndef OS_TARGET
OS_TARGET:=$(shell $(FPC) -iTO)
endif

# Source OS
ifndef OS_SOURCE
OS_SOURCE:=$(shell $(FPC) -iSO)
endif

# Target CPU
ifndef CPU_TARGET
CPU_TARGET:=$(shell $(FPC) -iTP)
endif

# Source CPU
ifndef CPU_SOURCE
CPU_SOURCE:=$(shell $(FPC) -iSP)
endif

# FPC version
ifndef FPC_VERSION
FPC_VERSION:=$(shell $(FPC) -iV)
endif

export FPC OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FPC_VERSION

#####################################################################
# FPCDIR Setting
#####################################################################

# Test FPCDIR to look if the RTL dir exists
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=wrong
endif
endif
else
override FPCDIR=wrong
endif

# Detect FPCDIR
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(FPCDIR)/rtl),)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
endif

#####################################################################
# User Settings
#####################################################################


# Targets

override DIROBJECTS+=$(wildcard src widgets apps)

# Clean


# Install

PACKAGENAME=kcl
ZIPTARGET=install

# Defaults


# Directories


# Packages


# Libraries


#####################################################################
# Shell tools
#####################################################################

# echo
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(EXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=echo
ECHOE:=echo
else
ECHO:=$(firstword $(ECHO))
ECHOE=$(ECHO) -E
endif
else
ECHO:=$(firstword $(ECHO))
ECHOE=$(ECHO) -E
endif
endif

# To copy pograms
ifndef COPY
COPY:=cp -fp
endif

# Copy a whole tree
ifndef COPYTREE
COPYTREE:=cp -rfp
endif

# To move pograms
ifndef MOVE
MOVE:=mv -f
endif

# Check delete program
ifndef DEL
DEL:=rm -f
endif

# Check deltree program
ifndef DELTREE
DELTREE:=rm -rf
endif

# To install files
ifndef INSTALL
ifdef inUnix
INSTALL:=install -m 644
else
INSTALL:=$(COPY)
endif
endif

# To install programs
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=install -m 755
else
INSTALLEXE:=$(COPY)
endif
endif

# To make a directory.
ifndef MKDIR
ifdef inUnix
MKDIR:=install -m 755 -d
else
MKDIR:=ginstall -m 755 -d
endif
endif

export ECHO ECHOE COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR

#####################################################################
# Default Tools
#####################################################################

# assembler, redefine it if cross compiling
ifndef AS
AS=as
endif

# linker, but probably not used
ifndef LD
LD=ld
endif

# ppas.bat / ppas.sh
ifdef inUnix
PPAS=ppas.sh
else
ifdef inOS2
PPAS=ppas.cmd
else
PPAS=ppas.bat
endif
endif

# ldconfig to rebuild .so cache
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif

# ZipProg, you can't use Zip as the var name (PFV)
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG=
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG

ZIPOPT=-9
ZIPEXT=.zip

# Tar
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG=
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG

ifeq ($(USETAR),bz2)
TAROPT=vI
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif



PKGALL=1
PKGKCLBASE=src
PKGKCLWIDGETS=widgets
PKGKCLAPPS=apps


# Pkg all

ifdef PKGALL
.PHONY:  pkgall_all pkgall_debug pkgall_examples pkgall_test pkgall_smart pkgall_shared pkgall_showinstall pkgall_install pkgall_sourceinstall pkgall_exampleinstall pkgall_zipinstall pkgall_zipsourceinstall pkgall_zipexampleinstall pkgall_clean pkgall_distclean pkgall_cleanall pkgall_require pkgall_info

pkgall_all: $(addsuffix _all,$(DIROBJECTS))

pkgall_debug: $(addsuffix _debug,$(DIROBJECTS))

pkgall_examples: $(addsuffix _examples,$(DIROBJECTS))

pkgall_test: $(addsuffix _test,$(DIROBJECTS))

pkgall_smart: $(addsuffix _smart,$(DIROBJECTS))

pkgall_shared: $(addsuffix _shared,$(DIROBJECTS))

pkgall_showinstall: $(addsuffix _showinstall,$(DIROBJECTS))

pkgall_install: $(addsuffix _install,$(DIROBJECTS))

pkgall_sourceinstall: $(addsuffix _sourceinstall,$(DIROBJECTS))

pkgall_exampleinstall: $(addsuffix _exampleinstall,$(DIROBJECTS))

pkgall_zipinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=all ZIPTARGET=pkgall_install

pkgall_zipsourceinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=all PACKAGESUFFIX=src ZIPTARGET=pkgall_sourceinstall

pkgall_clean: $(addsuffix _clean,$(DIROBJECTS))

pkgall_distclean: $(addsuffix _distclean,$(DIROBJECTS))

pkgall_cleanall: $(addsuffix _cleanall,$(DIROBJECTS))

pkgall_require: $(addsuffix _require,$(DIROBJECTS))

endif

# Pkg kclbase

ifdef PKGKCLBASE
.PHONY:  pkgkclbase_all pkgkclbase_debug pkgkclbase_examples pkgkclbase_test pkgkclbase_smart pkgkclbase_shared pkgkclbase_showinstall pkgkclbase_install pkgkclbase_sourceinstall pkgkclbase_exampleinstall pkgkclbase_zipinstall pkgkclbase_zipsourceinstall pkgkclbase_zipexampleinstall pkgkclbase_clean pkgkclbase_distclean pkgkclbase_cleanall pkgkclbase_require pkgkclbase_info

override PKGOBJECTS+=pkgkclbase
pkgkclbase_all: $(addsuffix _all,$(PKGKCLBASE))

pkgkclbase_debug: $(addsuffix _debug,$(PKGKCLBASE))

pkgkclbase_examples: $(addsuffix _examples,$(PKGKCLBASE))

pkgkclbase_test: $(addsuffix _test,$(PKGKCLBASE))

pkgkclbase_smart: $(addsuffix _smart,$(PKGKCLBASE))

pkgkclbase_shared: $(addsuffix _shared,$(PKGKCLBASE))

pkgkclbase_showinstall: $(addsuffix _showinstall,$(PKGKCLBASE))

pkgkclbase_install: $(addsuffix _install,$(PKGKCLBASE))

pkgkclbase_sourceinstall: $(addsuffix _sourceinstall,$(PKGKCLBASE))

pkgkclbase_exampleinstall: $(addsuffix _exampleinstall,$(PKGKCLBASE))

pkgkclbase_zipinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclbase ZIPTARGET=pkgkclbase_install

pkgkclbase_zipsourceinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclbase PACKAGESUFFIX=src ZIPTARGET=pkgkclbase_sourceinstall

pkgkclbase_clean: $(addsuffix _clean,$(PKGKCLBASE))

pkgkclbase_distclean: $(addsuffix _distclean,$(PKGKCLBASE))

pkgkclbase_cleanall: $(addsuffix _cleanall,$(PKGKCLBASE))

pkgkclbase_require: $(addsuffix _require,$(PKGKCLBASE))

endif

# Pkg kclwidgets

ifdef PKGKCLWIDGETS
.PHONY:  pkgkclwidgets_all pkgkclwidgets_debug pkgkclwidgets_examples pkgkclwidgets_test pkgkclwidgets_smart pkgkclwidgets_shared pkgkclwidgets_showinstall pkgkclwidgets_install pkgkclwidgets_sourceinstall pkgkclwidgets_exampleinstall pkgkclwidgets_zipinstall pkgkclwidgets_zipsourceinstall pkgkclwidgets_zipexampleinstall pkgkclwidgets_clean pkgkclwidgets_distclean pkgkclwidgets_cleanall pkgkclwidgets_require pkgkclwidgets_info

override PKGOBJECTS+=pkgkclwidgets
pkgkclwidgets_all: $(addsuffix _all,$(PKGKCLWIDGETS))

pkgkclwidgets_debug: $(addsuffix _debug,$(PKGKCLWIDGETS))

pkgkclwidgets_examples: $(addsuffix _examples,$(PKGKCLWIDGETS))

pkgkclwidgets_test: $(addsuffix _test,$(PKGKCLWIDGETS))

pkgkclwidgets_smart: $(addsuffix _smart,$(PKGKCLWIDGETS))

pkgkclwidgets_shared: $(addsuffix _shared,$(PKGKCLWIDGETS))

pkgkclwidgets_showinstall: $(addsuffix _showinstall,$(PKGKCLWIDGETS))

pkgkclwidgets_install: $(addsuffix _install,$(PKGKCLWIDGETS))

pkgkclwidgets_sourceinstall: $(addsuffix _sourceinstall,$(PKGKCLWIDGETS))

pkgkclwidgets_exampleinstall: $(addsuffix _exampleinstall,$(PKGKCLWIDGETS))

pkgkclwidgets_zipinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclwidgets ZIPTARGET=pkgkclwidgets_install

pkgkclwidgets_zipsourceinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclwidgets PACKAGESUFFIX=src ZIPTARGET=pkgkclwidgets_sourceinstall

pkgkclwidgets_clean: $(addsuffix _clean,$(PKGKCLWIDGETS))

pkgkclwidgets_distclean: $(addsuffix _distclean,$(PKGKCLWIDGETS))

pkgkclwidgets_cleanall: $(addsuffix _cleanall,$(PKGKCLWIDGETS))

pkgkclwidgets_require: $(addsuffix _require,$(PKGKCLWIDGETS))

endif

# Pkg kclapps

ifdef PKGKCLAPPS
.PHONY:  pkgkclapps_all pkgkclapps_debug pkgkclapps_examples pkgkclapps_test pkgkclapps_smart pkgkclapps_shared pkgkclapps_showinstall pkgkclapps_install pkgkclapps_sourceinstall pkgkclapps_exampleinstall pkgkclapps_zipinstall pkgkclapps_zipsourceinstall pkgkclapps_zipexampleinstall pkgkclapps_clean pkgkclapps_distclean pkgkclapps_cleanall pkgkclapps_require pkgkclapps_info

override PKGOBJECTS+=pkgkclapps
pkgkclapps_all: $(addsuffix _all,$(PKGKCLAPPS))

pkgkclapps_debug: $(addsuffix _debug,$(PKGKCLAPPS))

pkgkclapps_examples: $(addsuffix _examples,$(PKGKCLAPPS))

pkgkclapps_test: $(addsuffix _test,$(PKGKCLAPPS))

pkgkclapps_smart: $(addsuffix _smart,$(PKGKCLAPPS))

pkgkclapps_shared: $(addsuffix _shared,$(PKGKCLAPPS))

pkgkclapps_showinstall: $(addsuffix _showinstall,$(PKGKCLAPPS))

pkgkclapps_install: $(addsuffix _install,$(PKGKCLAPPS))

pkgkclapps_sourceinstall: $(addsuffix _sourceinstall,$(PKGKCLAPPS))

pkgkclapps_exampleinstall: $(addsuffix _exampleinstall,$(PKGKCLAPPS))

pkgkclapps_zipinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclapps ZIPTARGET=pkgkclapps_install

pkgkclapps_zipsourceinstall:
	$(MAKE) fpc_zipinstall PACKAGENAME=kclapps PACKAGESUFFIX=src ZIPTARGET=pkgkclapps_sourceinstall

pkgkclapps_clean: $(addsuffix _clean,$(PKGKCLAPPS))

pkgkclapps_distclean: $(addsuffix _distclean,$(PKGKCLAPPS))

pkgkclapps_cleanall: $(addsuffix _cleanall,$(PKGKCLAPPS))

pkgkclapps_require: $(addsuffix _require,$(PKGKCLAPPS))

endif

#####################################################################
# Default Directories
#####################################################################

# Linux and freebsd use unix dirs with /usr/bin, /usr/lib
ifeq ($(OS_TARGET),linux)
UNIXINSTALLDIR=1
endif
ifeq ($(OS_TARGET),freebsd)
UNIXINSTALLDIR=1
endif

# set the prefix directory where to install everything
ifndef PREFIXINSTALLDIR
ifdef UNIXINSTALLDIR
PREFIXINSTALLDIR=/usr
else
PREFIXINSTALLDIR=/pp
endif
endif
export PREFIXINSTALLDIR

# Where to place the resulting zip files
ifndef DESTZIPDIR
DESTZIPDIR:=$(BASEDIR)
endif
export DESTZIPDIR

#####################################################################
# Install Directories
#####################################################################

# set the base directory where to install everything
ifndef BASEINSTALLDIR
ifdef UNIXINSTALLDIR
BASEINSTALLDIR=$(PREFIXINSTALLDIR)/lib/fpc/$(FPC_VERSION)
else
BASEINSTALLDIR=$(PREFIXINSTALLDIR)
endif
endif

# set the directory where to install the binaries
ifndef BININSTALLDIR
ifdef UNIXINSTALLDIR
BININSTALLDIR=$(PREFIXINSTALLDIR)/bin
else
BININSTALLDIR=$(BASEINSTALLDIR)/bin/$(OS_TARGET)
endif
endif

# set the directory where to install the units.
ifndef UNITINSTALLDIR
UNITINSTALLDIR=$(BASEINSTALLDIR)/units/$(OS_TARGET)
ifdef UNITSUBDIR
UNITINSTALLDIR:=$(UNITINSTALLDIR)/$(UNITSUBDIR)
endif
endif

# Where to install shared libraries
ifndef LIBINSTALLDIR
ifdef UNIXINSTALLDIR
LIBINSTALLDIR=$(PREFIXINSTALLDIR)/lib
else
LIBINSTALLDIR=$(UNITINSTALLDIR)
endif
endif

# Where the source files will be stored
ifndef SOURCEINSTALLDIR
ifdef UNIXINSTALLDIR
SOURCEINSTALLDIR=$(PREFIXINSTALLDIR)/src/fpc-$(FPC_VERSION)
else
SOURCEINSTALLDIR=$(BASEINSTALLDIR)/source
endif
ifdef SOURCESUBDIR
SOURCEINSTALLDIR:=$(SOURCEINSTALLDIR)/$(SOURCESUBDIR)
endif
endif

# Where the doc files will be stored
ifndef DOCINSTALLDIR
ifdef UNIXINSTALLDIR
DOCINSTALLDIR=$(PREFIXINSTALLDIR)/doc/fpc-$(FPC_VERSION)
else
DOCINSTALLDIR=$(BASEINSTALLDIR)/doc
endif
endif

# Where to install the examples, under linux we use the doc dir
# because the copytree command will create a subdir itself
ifndef EXAMPLEINSTALLDIR
ifdef UNIXINSTALLDIR
EXAMPLEINSTALLDIR=$(DOCINSTALLDIR)/examples
else
EXAMPLEINSTALLDIR=$(BASEINSTALLDIR)/examples
endif
ifdef EXAMPLESUBDIR
EXAMPLEINSTALLDIR:=$(EXAMPLEINSTALLDIR)/$(EXAMPLESUBDIR)
endif
endif

# Where the some extra (data)files will be stored
ifndef DATAINSTALLDIR
DATAINSTALLDIR=$(BASEINSTALLDIR)
endif

#####################################################################
# Redirection
#####################################################################

ifndef REDIRFILE
REDIRFILE=log
endif

ifdef REDIR
ifndef inUnix
override FPC=redir -eo $(FPC)
endif
# set the verbosity to max
override FPCOPT+=-va
override REDIR:= >> $(REDIRFILE)
endif

#####################################################################
# Standard rules
#####################################################################

all: $(addsuffix _all,$(DIROBJECTS))

debug: $(addsuffix _debug,$(DIROBJECTS))

smart: $(addsuffix _smart,$(DIROBJECTS))

shared: $(addsuffix _shared,$(DIROBJECTS))

showinstall: $(addsuffix _showinstall,$(DIROBJECTS))

install: $(addsuffix _install,$(DIROBJECTS))

sourceinstall: fpc_sourceinstall

zipinstall: $(addsuffix _zipinstall,$(PKGOBJECTS))

zipsourceinstall: fpc_zipsourceinstall

clean: $(addsuffix _clean,$(DIROBJECTS))

distclean: $(addsuffix _distclean,$(DIROBJECTS))

cleanall: $(addsuffix _cleanall,$(DIROBJECTS))

require: $(addsuffix _require,$(DIROBJECTS))

.PHONY:  all debug smart shared showinstall install sourceinstall zipinstall zipsourceinstall clean distclean cleanall require

#####################################################################
# SourceInstall rules
#####################################################################

.PHONY: fpc_sourceinstall

ifndef SOURCETOPDIR
SOURCETOPDIR=$(BASEDIR)
endif

fpc_sourceinstall: clean
	$(MKDIR) $(SOURCEINSTALLDIR)
	$(COPYTREE) $(SOURCETOPDIR) $(SOURCEINSTALLDIR)

#####################################################################
# Zip
#####################################################################

.PHONY: fpc_zipinstall

# Create suffix to add
ifndef PACKAGESUFFIX
PACKAGESUFFIX=$(OS_TARGET)
ifeq ($(OS_TARGET),go32v2)
PACKAGESUFFIX=go32
endif
ifeq ($(OS_TARGET),win32)
PACKAGESUFFIX=w32
endif
endif

# Temporary path to pack a file
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/pack_tmp
else
PACKDIR=/tmp/fpc-pack
endif
endif

# Maybe create default zipname from packagename
ifndef ZIPNAME
ifdef PACKAGENAME
ZIPNAME=$(PACKAGEPREFIX)$(PACKAGENAME)$(PACKAGESUFFIX)
endif
endif

# Use tar by default under linux
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif

fpc_zipinstall:
ifndef ZIPNAME
	@$(ECHO) "Please specify ZIPNAME!"
	@exit 1
else
	$(MAKE) $(ZIPTARGET) PREFIXINSTALLDIR=$(PACKDIR)
ifdef USETAR
	$(DEL) $(DESTZIPDIR)/$(ZIPNAME)$(TAREXT)
	cd $(PACKDIR) ; $(TARPROG) c$(TAROPT) --file $(DESTZIPDIR)/$(ZIPNAME)$(TAREXT) * ; cd $(BASEDIR)
else
	$(DEL) $(DESTZIPDIR)/$(ZIPNAME)$(ZIPEXT)
	cd $(PACKDIR) ; $(ZIPPROG) -Dr $(ZIPOPT) $(DESTZIPDIR)/$(ZIPNAME)$(ZIPEXT) * ; cd $(BASEDIR)
endif
	$(DELTREE) $(PACKDIR)
endif

.PHONY:  fpc_zipsourceinstall

fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall PACKAGESUFFIX=src

#####################################################################
# Directories
#####################################################################

OBJECTDIRSRC=1
OBJECTDIRWIDGETS=1
OBJECTDIRAPPS=1

# Dir src

ifdef OBJECTDIRSRC
.PHONY:  src_all src_debug src_examples src_test src_smart src_shared src_showinstall src_install src_sourceinstall src_exampleinstall src_zipinstall src_zipsourceinstall src_zipexampleinstall src_clean src_distclean src_cleanall src_require src_info

src_all:
	$(MAKE) -C src all

src_debug:
	$(MAKE) -C src debug

src_examples:
	$(MAKE) -C src examples

src_test:
	$(MAKE) -C src test

src_smart:
	$(MAKE) -C src smart

src_shared:
	$(MAKE) -C src shared

src_showinstall:
	$(MAKE) -C src showinstall

src_install:
	$(MAKE) -C src install

src_sourceinstall:
	$(MAKE) -C src sourceinstall

src_exampleinstall:
	$(MAKE) -C src exampleinstall

src_zipinstall:
	$(MAKE) -C src zipinstall

src_zipsourceinstall:
	$(MAKE) -C src zipsourceinstall

src_zipexampleinstall:
	$(MAKE) -C src zipexampleinstall

src_clean:
	$(MAKE) -C src clean

src_distclean:
	$(MAKE) -C src distclean

src_cleanall:
	$(MAKE) -C src cleanall

src_require:
	$(MAKE) -C src require

src_info:
	$(MAKE) -C src info
endif

# Dir widgets

ifdef OBJECTDIRWIDGETS
.PHONY:  widgets_all widgets_debug widgets_examples widgets_test widgets_smart widgets_shared widgets_showinstall widgets_install widgets_sourceinstall widgets_exampleinstall widgets_zipinstall widgets_zipsourceinstall widgets_zipexampleinstall widgets_clean widgets_distclean widgets_cleanall widgets_require widgets_info

widgets_all:
	$(MAKE) -C widgets all

widgets_debug:
	$(MAKE) -C widgets debug

widgets_examples:
	$(MAKE) -C widgets examples

widgets_test:
	$(MAKE) -C widgets test

widgets_smart:
	$(MAKE) -C widgets smart

widgets_shared:
	$(MAKE) -C widgets shared

widgets_showinstall:
	$(MAKE) -C widgets showinstall

widgets_install:
	$(MAKE) -C widgets install

widgets_sourceinstall:
	$(MAKE) -C widgets sourceinstall

widgets_exampleinstall:
	$(MAKE) -C widgets exampleinstall

widgets_zipinstall:
	$(MAKE) -C widgets zipinstall

widgets_zipsourceinstall:
	$(MAKE) -C widgets zipsourceinstall

widgets_zipexampleinstall:
	$(MAKE) -C widgets zipexampleinstall

widgets_clean:
	$(MAKE) -C widgets clean

widgets_distclean:
	$(MAKE) -C widgets distclean

widgets_cleanall:
	$(MAKE) -C widgets cleanall

widgets_require:
	$(MAKE) -C widgets require

widgets_info:
	$(MAKE) -C widgets info
endif

# Dir apps

ifdef OBJECTDIRAPPS
.PHONY:  apps_all apps_debug apps_examples apps_test apps_smart apps_shared apps_showinstall apps_install apps_sourceinstall apps_exampleinstall apps_zipinstall apps_zipsourceinstall apps_zipexampleinstall apps_clean apps_distclean apps_cleanall apps_require apps_info

apps_all:
	$(MAKE) -C apps all

apps_debug:
	$(MAKE) -C apps debug

apps_examples:
	$(MAKE) -C apps examples

apps_test:
	$(MAKE) -C apps test

apps_smart:
	$(MAKE) -C apps smart

apps_shared:
	$(MAKE) -C apps shared

apps_showinstall:
	$(MAKE) -C apps showinstall

apps_install:
	$(MAKE) -C apps install

apps_sourceinstall:
	$(MAKE) -C apps sourceinstall

apps_exampleinstall:
	$(MAKE) -C apps exampleinstall

apps_zipinstall:
	$(MAKE) -C apps zipinstall

apps_zipsourceinstall:
	$(MAKE) -C apps zipsourceinstall

apps_zipexampleinstall:
	$(MAKE) -C apps zipexampleinstall

apps_clean:
	$(MAKE) -C apps clean

apps_distclean:
	$(MAKE) -C apps distclean

apps_cleanall:
	$(MAKE) -C apps cleanall

apps_require:
	$(MAKE) -C apps require

apps_info:
	$(MAKE) -C apps info
endif

#####################################################################
# Local Makefile
#####################################################################

ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif

