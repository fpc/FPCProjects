#
# Makefile generated by fpcmake v0.99.13 [2000/01/03]
#

defaultrule: all

#####################################################################
# Autodetect OS (Linux or Dos or Windows NT)
# define inlinux when running under linux
# define inWinNT when running under WinNT
#####################################################################

# We need only / in the path
override PATH:=$(subst \,/,$(PATH))

# Search for PWD and determine also if we are under linux
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(subst ;, ,$(PATH)))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(subst :, ,$(PATH)))))
ifeq ($(PWD),)
nopwd:
	@echo You need the GNU utils package to use this Makefile!
	@echo Get ftp://ftp.freepascal.org/pub/fpc/dist/go32v2/utilgo32.zip
	@exit
else
inlinux=1
endif
else
PWD:=$(firstword $(PWD))
endif

# Detect NT - NT sets OS to Windows_NT
ifndef inlinux
ifeq ($(OS),Windows_NT)
inWinNT=1
endif
endif

# Detect OS/2 - OS/2 has OS2_SHELL defined
ifndef inlinux
ifndef inWinNT
ifdef OS2_SHELL
inOS2=1
endif
endif
endif

# The extension of executables
ifdef inlinux
EXEEXT=
else
EXEEXT=.exe
endif

# The path which is searched separated by spaces
ifdef inlinux
SEARCHPATH=$(subst :, ,$(PATH))
else
SEARCHPATH=$(subst ;, ,$(PATH))
endif

#####################################################################
# FPC version/target Detection
#####################################################################

# What compiler to use ?
ifndef FPC
# Compatibility with old makefiles
ifdef PP
FPC=$(PP)
else
ifdef inOS2
FPC=ppos2$(EXEEXT)
else
FPC=ppc386$(EXEEXT)
endif
endif
endif

# Target OS
ifndef OS_TARGET
OS_TARGET:=$(shell $(FPC) -iTO)
endif

# Source OS
ifndef OS_SOURCE
OS_SOURCE:=$(shell $(FPC) -iSO)
endif

# Target CPU
ifndef CPU_TARGET
CPU_TARGET:=$(shell $(FPC) -iTP)
endif

# Source CPU
ifndef CPU_SOURCE
CPU_SOURCE:=$(shell $(FPC) -iSP)
endif

# FPC version
ifndef FPC_VERSION
FPC_VERSION:=$(shell $(FPC) -iV)
endif

export FPC OS_TARGET OS_SOURCE CPU_TARGET CPU_SOURCE FPC_VERSION

ifndef FPCDIR
# Detect FPCDIR
ifdef inlinux
FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
else
FPCDIR:=$(subst /$(FPC)$(EXEEXT),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC)$(EXEEXT),$(SEARCHPATH))))))
endif
export FPCDIR

endif
export FPCDIR
#####################################################################
# Default Settings
#####################################################################

# Release ? Then force OPT and don't use extra opts via commandline
ifndef REDIRFILE
REDIRFILE=log
endif

ifdef RELEASE
override OPT:=-Xs -OG2p3 -n
endif

# Verbose settings (warning,note,info)
ifdef VERBOSE
override OPT+=-vwni
endif

ifdef REDIR
ifndef inlinux
override FPC=redir -eo $(FPC)
endif
# set the verbosity to max
override OPT+=-va
override REDIR:= >> $(REDIRFILE)
endif

#####################################################################
# User Settings
#####################################################################


# Targets

override DIROBJECTS+=$(wildcard kclshedit glpaintbox)

# Clean


# Install

ZIPTARGET=install

# Defaults


# Directories

ifndef PACKAGEDIR
ifneq ($(wildcard $(FPCDIR)/packages),)
PACKAGEDIR=$(FPCDIR)/packages
else
PACKAGEDIR=$(FPCDIR)/units/$(OS_TARGET)
endif
endif
ifndef COMPONENTDIR
COMPONENTDIR=$(FPCDIR)/components
endif

# Packages

override PACKAGES=rtl
PACKAGEDIR_RTL=$(FPCDIR)/rtl/$(OS_TARGET)

# Libraries


#####################################################################
# Standard rules
#####################################################################

all: $(addsuffix _all,$(DIROBJECTS))

debug: $(addsuffix _debug,$(DIROBJECTS))

examples: $(addsuffix _examples,$(DIROBJECTS))

test: $(addsuffix _test,$(DIROBJECTS))

smart: $(addsuffix _smart,$(DIROBJECTS))

shared: $(addsuffix _shared,$(DIROBJECTS))

showinstall: $(addsuffix _showinstall,$(DIROBJECTS))

install: $(addsuffix _install,$(DIROBJECTS))

sourceinstall: $(addsuffix _sourceinstall,$(DIROBJECTS))

clean: $(addsuffix _clean,$(DIROBJECTS))

cleanall: $(addsuffix _cleanall,$(DIROBJECTS))

require: $(addsuffix _require,$(DIROBJECTS))

.PHONY:  all debug examples test smart shared showinstall install sourceinstall clean cleanall require


ifdef PACKAGERTL
ifneq ($(wildcard $(PACKAGEDIR_RTL)),)
ifeq ($(wildcard $(PACKAGEDIR_RTL)/$(FPCMADE)),)
override COMPILEPACKAGES+=rtl
rtl_package:
	$(MAKE) -C $(PACKAGEDIR_RTL) all
endif
endif
endif

.PHONY:  rtl_package


# Target Dirs

OBJECTDIRKCLSHEDIT=1
OBJECTDIRGLPAINTBOX=1

# Dir kclshedit

ifdef OBJECTDIRKCLSHEDIT
.PHONY:  kclshedit_all kclshedit_debug kclshedit_examples kclshedit_test kclshedit_smart kclshedit_shared kclshedit_showinstall kclshedit_install kclshedit_sourceinstall kclshedit_zipinstall kclshedit_zipinstalladd kclshedit_clean kclshedit_cleanall kclshedit_require kclshedit_info

kclshedit_all:
	$(MAKE) -C kclshedit all

kclshedit_debug:
	$(MAKE) -C kclshedit debug

kclshedit_examples:
	$(MAKE) -C kclshedit examples

kclshedit_test:
	$(MAKE) -C kclshedit test

kclshedit_smart:
	$(MAKE) -C kclshedit smart

kclshedit_shared:
	$(MAKE) -C kclshedit shared

kclshedit_showinstall:
	$(MAKE) -C kclshedit showinstall

kclshedit_install:
	$(MAKE) -C kclshedit install

kclshedit_sourceinstall:
	$(MAKE) -C kclshedit sourceinstall

kclshedit_zipinstall:
	$(MAKE) -C kclshedit zipinstall

kclshedit_zipinstalladd:
	$(MAKE) -C kclshedit zipinstalladd

kclshedit_clean:
	$(MAKE) -C kclshedit clean

kclshedit_cleanall:
	$(MAKE) -C kclshedit cleanall

kclshedit_require:
	$(MAKE) -C kclshedit require

kclshedit_info:
	$(MAKE) -C kclshedit info
endif

# Dir glpaintbox

ifdef OBJECTDIRGLPAINTBOX
.PHONY:  glpaintbox_all glpaintbox_debug glpaintbox_examples glpaintbox_test glpaintbox_smart glpaintbox_shared glpaintbox_showinstall glpaintbox_install glpaintbox_sourceinstall glpaintbox_zipinstall glpaintbox_zipinstalladd glpaintbox_clean glpaintbox_cleanall glpaintbox_require glpaintbox_info

glpaintbox_all:
	$(MAKE) -C glpaintbox all

glpaintbox_debug:
	$(MAKE) -C glpaintbox debug

glpaintbox_examples:
	$(MAKE) -C glpaintbox examples

glpaintbox_test:
	$(MAKE) -C glpaintbox test

glpaintbox_smart:
	$(MAKE) -C glpaintbox smart

glpaintbox_shared:
	$(MAKE) -C glpaintbox shared

glpaintbox_showinstall:
	$(MAKE) -C glpaintbox showinstall

glpaintbox_install:
	$(MAKE) -C glpaintbox install

glpaintbox_sourceinstall:
	$(MAKE) -C glpaintbox sourceinstall

glpaintbox_zipinstall:
	$(MAKE) -C glpaintbox zipinstall

glpaintbox_zipinstalladd:
	$(MAKE) -C glpaintbox zipinstalladd

glpaintbox_clean:
	$(MAKE) -C glpaintbox clean

glpaintbox_cleanall:
	$(MAKE) -C glpaintbox cleanall

glpaintbox_require:
	$(MAKE) -C glpaintbox require

glpaintbox_info:
	$(MAKE) -C glpaintbox info
endif

