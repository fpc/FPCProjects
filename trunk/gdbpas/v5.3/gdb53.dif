diff -u -p -r -N -x Entries origdb/Makefile.in gdb/Makefile.in
--- origdb/Makefile.in	2002-11-25 23:05:38.000000000 +0100
+++ gdb/Makefile.in	2002-12-13 10:41:50.000000000 +0100
@@ -561,7 +561,7 @@ SFILES = ada-exp.y ada-lang.c ada-typepr
 	ui-file.h ui-file.c \
 	frame.c doublest.c \
 	builtin-regs.c std-regs.c \
-	gnu-v2-abi.c gnu-v3-abi.c hpacc-abi.c cp-abi.c
+	fpc-abi.c gnu-v2-abi.c gnu-v3-abi.c hpacc-abi.c cp-abi.c

 LINTFILES = $(SFILES) $(YYFILES) $(CONFIG_SRCS) init.c

@@ -846,7 +846,7 @@ COMMON_OBS = version.o blockframe.o brea
 	nlmread.o serial.o mdebugread.o top.o utils.o \
 	ui-file.o \
 	frame.o doublest.o \
-	gnu-v2-abi.o gnu-v3-abi.o hpacc-abi.o cp-abi.o
+	fpc-abi.o gnu-v2-abi.o gnu-v3-abi.o hpacc-abi.o cp-abi.o

 OBS = $(COMMON_OBS) $(ANNOTATE_OBS)

@@ -1661,6 +1661,8 @@ findvar.o: findvar.c $(defs_h) $(symtab_
 fork-child.o: fork-child.c $(defs_h) $(gdb_string_h) $(frame_h) \
 	$(inferior_h) $(target_h) $(gdb_wait_h) $(gdb_vfork_h) $(gdbcore_h) \
 	$(terminal_h) $(gdbthread_h) $(command_h)
+fpc-abi.o: fpc-abi.c $(defs_h) $(gdb_string_h) $(symtab_h) \
+	$(gdbtypes_h) $(value_h) $(demangle_h) $(cp_abi_h)
 # OBSOLETE fr30-tdep.o: fr30-tdep.c
 frame.o: frame.c $(defs_h) $(frame_h) $(target_h) $(value_h) $(inferior_h) \
 	$(regcache_h) $(gdb_assert_h)
@@ -1846,6 +1848,8 @@ m68k-tdep.o: m68k-tdep.c $(defs_h) $(fra
 m68klinux-nat.o: m68klinux-nat.c $(defs_h) $(frame_h) $(inferior_h) \
 	$(language_h) $(gdbcore_h) $(regcache_h) $(gdb_stat_h) \
 	$(floatformat_h) $(target_h) $(gregset_h)
+m68klinux-tdep.o: m68klinux-tdep.c $(defs_h) $(gdbcore_h) $(frame_h) \
+	$(target_h)
 m68knbsd-nat.o: m68knbsd-nat.c $(defs_h) $(inferior_h) $(gdbcore_h) \
 	$(regcache_h)
 m68knbsd-tdep.o: m68knbsd-tdep.c $(defs_h) $(gdbtypes_h) $(regcache_h)
diff -u -p -r -N -x Entries origdb/fpc-abi.c gdb/fpc-abi.c
--- origdb/fpc-abi.c	Thu Jan  1 01:00:00 1970
+++ gdb/fpc-abi.c	Thu Dec 12 15:48:28 2002
@@ -0,0 +1,408 @@
+/* Abstraction of FPC abi.
+   Contributed by Pierre Muller  <muller@ics.u-strasbg.fr>
+   Copyright 2001 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or
+   modify
+   it under the terms of the GNU General Public License as published
+   by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+#include "defs.h"
+#include "gdb_string.h"
+#include "symtab.h"
+#include "gdbtypes.h"
+#include "value.h"
+#include "demangle.h"
+#include "cp-abi.h"
+
+#include <ctype.h>
+
+struct cp_abi_ops fpc_abi_ops;
+
+static int vb_match (struct type *, int, struct type *);
+int fpc_baseclass_offset (struct type *type, int index, char *valaddr,
+			    CORE_ADDR address);
+
+static enum dtor_kinds
+fpc_is_destructor_name (const char *name)
+{
+  if ((name[0] == '_' && is_cplus_marker (name[1]) && name[2] == '_')
+      || strncmp (name, "__dt__", 6) == 0)
+    return complete_object_dtor;
+  else
+    return 0;
+}
+
+static enum ctor_kinds
+fpc_is_constructor_name (const char *name)
+{
+  if ((name[0] == '_' && name[1] == '_'
+       && (isdigit (name[2]) || strchr ("Qt", name[2])))
+      || strncmp (name, "__ct__", 6) == 0)
+    return complete_object_ctor;
+  else
+    return 0;
+}
+
+static int
+fpc_is_vtable_name (const char *name)
+{
+  return ((name)[0] == 'V'
+	  && (name)[1] == 'M' && (name)[2] == 'T'
+	  && (name)[3] == '_');
+}
+
+static int
+fpc_is_operator_name (const char *name)
+{
+  return strncmp (name, "operator", 8) == 0;
+}
+
+
+/* Return a virtual function as a value.
+   ARG1 is the object which provides the virtual function
+   table pointer.  *ARG1P is side-effected in calling this function.
+   F is the list of member functions which contains the desired virtual
+   function.
+   J is an index into F which provides the desired virtual function.
+
+   TYPE is the type in which F is located.  */
+static struct value *
+fpc_virtual_fn_field (struct value **arg1p, struct fn_field * f, int j,
+			struct type * type, int offset)
+{
+  struct value *arg1 = *arg1p;
+  struct type *type1 = check_typedef (VALUE_TYPE (arg1));
+
+
+  struct type *entry_type;
+  /* First, get the virtual function table pointer.  That comes
+     with a strange type, so cast it to type `pointer to long' (which
+     should serve just fine as a function type).  Then, index into
+     the table, and convert final value to appropriate function type.  */
+  struct value *entry;
+  struct value *vfn;
+  struct value *vtbl;
+  struct value *vi = value_from_longest (builtin_type_int,
+				     (LONGEST) TYPE_FN_FIELD_VOFFSET (f, j));
+  struct type *fcontext = TYPE_FN_FIELD_FCONTEXT (f, j);
+  struct type *context;
+  if (fcontext == NULL)
+    /* We don't have an fcontext (e.g. the program was compiled with
+       g++ version 1).  Try to get the vtbl from the TYPE_VPTR_BASETYPE.
+       This won't work right for multiple inheritance, but at least we
+       should do as well as GDB 3.x did.  */
+    fcontext = TYPE_VPTR_BASETYPE (type);
+  context = lookup_pointer_type (fcontext);
+  /* Now context is a pointer to the basetype containing the vtbl.  */
+  if (TYPE_TARGET_TYPE (context) != type1)
+    {
+      struct value *tmp = value_cast (context, value_addr (arg1));
+      arg1 = value_ind (tmp);
+      type1 = check_typedef (VALUE_TYPE (arg1));
+    }
+
+  context = type1;
+  /* Now context is the basetype containing the vtbl.  */
+
+  /* This type may have been defined before its virtual function table
+     was.  If so, fill in the virtual function table entry for the
+     type now.  */
+  if (TYPE_VPTR_FIELDNO (context) < 0)
+    fill_in_vptr_fieldno (context);
+
+  /* The virtual function table is now an array of structures
+     which have the form { int16 offset, delta; void *pfn; }.  */
+  vtbl = value_primitive_field (arg1, 0, TYPE_VPTR_FIELDNO (context),
+				TYPE_VPTR_BASETYPE (context));
+
+  /* With older versions of g++, the vtbl field pointed to an array
+     of structures.  Nowadays it points directly to the structure. */
+  if (TYPE_CODE (VALUE_TYPE (vtbl)) == TYPE_CODE_PTR
+      && TYPE_CODE (TYPE_TARGET_TYPE (VALUE_TYPE (vtbl))) == TYPE_CODE_ARRAY)
+    {
+      /* Handle the case where the vtbl field points to an
+         array of structures. */
+      vtbl = value_ind (vtbl);
+
+      /* Index into the virtual function table.  This is hard-coded because
+         looking up a field is not cheap, and it may be important to save
+         time, e.g. if the user has set a conditional breakpoint calling
+         a virtual function.  */
+      entry = value_subscript (vtbl, vi);
+    }
+  else
+    {
+      /* Handle the case where the vtbl field points directly to a structure. */
+      vtbl = value_add (vtbl, vi);
+      entry = value_ind (vtbl);
+    }
+
+  entry_type = check_typedef (VALUE_TYPE (entry));
+
+  if (TYPE_CODE (entry_type) == TYPE_CODE_STRUCT)
+    {
+      /* Move the `this' pointer according to the virtual function table. */
+      VALUE_OFFSET (arg1) += value_as_long (value_field (entry, 0));
+
+      if (!VALUE_LAZY (arg1))
+	{
+	  VALUE_LAZY (arg1) = 1;
+	  value_fetch_lazy (arg1);
+	}
+
+      vfn = value_field (entry, 2);
+    }
+  else if (TYPE_CODE (entry_type) == TYPE_CODE_PTR)
+    vfn = entry;
+  else
+    error ("I'm confused:  virtual function table has bad type");
+  /* Reinstantiate the function pointer with the correct type.  */
+  VALUE_TYPE (vfn) = lookup_pointer_type (TYPE_FN_FIELD_TYPE (f, j));
+
+  *arg1p = arg1;
+  return vfn;
+}
+
+
+struct type *
+fpc_value_rtti_type (struct value *v, int *full, int *top, int *using_enc)
+{
+  struct type *known_type;
+  struct type *rtti_type;
+  CORE_ADDR coreptr;
+  struct value *vp;
+  long top_offset = 0;
+  char rtti_type_name[256];
+  CORE_ADDR vtbl;
+  struct minimal_symbol *minsym;
+  struct symbol *sym;
+  char *demangled_name;
+  char *mangled_name;
+  struct type *btype;
+
+  if (full)
+    *full = 0;
+  if (top)
+    *top = -1;
+  if (using_enc)
+    *using_enc = 0;
+
+  /* Get declared type */
+  known_type = VALUE_TYPE (v);
+  CHECK_TYPEDEF (known_type);
+  /* RTTI works only or class objects */
+  if (TYPE_CODE (known_type) != TYPE_CODE_CLASS)
+    return NULL;
+
+  /* Plan on this changing in the future as i get around to setting
+     the vtables properly for G++ compiled stuff.  Also, I'll be using
+     the type info functions, which are always right.  Deal with it
+     until then.  */
+
+  /* If the type has no vptr fieldno, try to get it filled in */
+  if (TYPE_VPTR_FIELDNO(known_type) < 0)
+    fill_in_vptr_fieldno(known_type);
+
+  /* If we still can't find one, give up */
+  if (TYPE_VPTR_FIELDNO(known_type) < 0)
+    return NULL;
+
+  /* Make sure our basetype and known type match, otherwise, cast
+     so we can get at the vtable properly.
+  */
+  btype = TYPE_VPTR_BASETYPE (known_type);
+  CHECK_TYPEDEF (btype);
+  if (btype != known_type )
+    {
+      v = value_cast (btype, v);
+      if (using_enc)
+        *using_enc=1;
+    }
+  /*
+    We can't use value_ind here, because it would want to use RTTI, and
+    we'd waste a bunch of time figuring out we already know the type.
+    Besides, we don't care about the type, just the actual pointer
+  */
+  if (VALUE_ADDRESS (value_field (v, TYPE_VPTR_FIELDNO (known_type))) == 0)
+    return NULL;
+
+  vtbl=value_as_address(value_ind(value_field(v,TYPE_VPTR_FIELDNO(known_type))));
+
+  /* Try to find a symbol that is the vtable */
+  minsym=lookup_minimal_symbol_by_pc(vtbl);
+  if (minsym==NULL
+      || (mangled_name=SYMBOL_NAME(minsym))==NULL
+      || !is_vtable_name (mangled_name))
+    return NULL;
+
+  /* If we just skip the prefix, we get screwed by namespaces */
+  if (strchr (mangled_name, '$'))
+    {
+      demangled_name = strchr (mangled_name, '$') + 2;
+    }
+  else
+    demangled_name = mangled_name;
+  /* Lookup the type for the name */
+  rtti_type=lookup_typename(demangled_name, (struct block *)0,1);
+
+  if (rtti_type==NULL)
+    return NULL;
+
+  if (TYPE_N_BASECLASSES(rtti_type) > 1 &&  full && (*full) != 1)
+    {
+      if (top)
+        *top=TYPE_BASECLASS_BITPOS(rtti_type,TYPE_VPTR_FIELDNO(rtti_type))/8;
+      if (top && ((*top) >0))
+        {
+          if (TYPE_LENGTH(rtti_type) > TYPE_LENGTH(known_type))
+            {
+              if (full)
+                *full=0;
+            }
+          else
+            {
+              if (full)
+                *full=1;
+            }
+        }
+    }
+  else
+    {
+      if (full)
+        *full=1;
+    }
+
+  return rtti_type;
+}
+
+/* Return true if the INDEXth field of TYPE is a virtual baseclass
+   pointer which is for the base class whose type is BASECLASS.  */
+
+static int
+vb_match (struct type *type, int index, struct type *basetype)
+{
+  struct type *fieldtype;
+  char *name = TYPE_FIELD_NAME (type, index);
+  char *field_class_name = NULL;
+
+  if (*name != '_')
+    return 0;
+  /* gcc 2.4 uses _vb$.  */
+  if (name[1] == 'v' && name[2] == 'b' && is_cplus_marker (name[3]))
+    field_class_name = name + 4;
+  /* gcc 2.5 will use __vb_.  */
+  if (name[1] == '_' && name[2] == 'v' && name[3] == 'b' && name[4] == '_')
+    field_class_name = name + 5;
+
+  if (field_class_name == NULL)
+    /* This field is not a virtual base class pointer.  */
+    return 0;
+
+  /* It's a virtual baseclass pointer, now we just need to find out whether
+     it is for this baseclass.  */
+  fieldtype = TYPE_FIELD_TYPE (type, index);
+  if (fieldtype == NULL
+      || TYPE_CODE (fieldtype) != TYPE_CODE_PTR)
+    /* "Can't happen".  */
+    return 0;
+
+  /* What we check for is that either the types are equal (needed for
+     nameless types) or have the same name.  This is ugly, and a more
+     elegant solution should be devised (which would probably just push
+     the ugliness into symbol reading unless we change the stabs format).  */
+  if (TYPE_TARGET_TYPE (fieldtype) == basetype)
+    return 1;
+
+  if (TYPE_NAME (basetype) != NULL
+      && TYPE_NAME (TYPE_TARGET_TYPE (fieldtype)) != NULL
+      && STREQ (TYPE_NAME (basetype),
+		TYPE_NAME (TYPE_TARGET_TYPE (fieldtype))))
+    return 1;
+  return 0;
+}
+
+/* Compute the offset of the baseclass which is
+   the INDEXth baseclass of class TYPE,
+   for value at VALADDR (in host) at ADDRESS (in target).
+   The result is the offset of the baseclass value relative
+   to (the address of)(ARG) + OFFSET.
+
+   -1 is returned on error. */
+
+int
+fpc_baseclass_offset (struct type *type, int index, char *valaddr,
+		  CORE_ADDR address)
+{
+  struct type *basetype = TYPE_BASECLASS (type, index);
+
+  if (BASETYPE_VIA_VIRTUAL (type, index))
+    {
+      /* Must hunt for the pointer to this virtual baseclass.  */
+      register int i, len = TYPE_NFIELDS (type);
+      register int n_baseclasses = TYPE_N_BASECLASSES (type);
+
+      /* First look for the virtual baseclass pointer
+         in the fields.  */
+      for (i = n_baseclasses; i < len; i++)
+	{
+	  if (vb_match (type, i, basetype))
+	    {
+	      CORE_ADDR addr
+	      = unpack_pointer (TYPE_FIELD_TYPE (type, i),
+				valaddr + (TYPE_FIELD_BITPOS (type, i) / 8));
+
+	      return addr - (LONGEST) address;
+	    }
+	}
+      /* Not in the fields, so try looking through the baseclasses.  */
+      for (i = index + 1; i < n_baseclasses; i++)
+	{
+	  int boffset =
+	  baseclass_offset (type, i, valaddr, address);
+	  if (boffset)
+	    return boffset;
+	}
+      /* Not found.  */
+      return -1;
+    }
+
+  /* Baseclass is easily computed.  */
+  return TYPE_BASECLASS_BITPOS (type, index) / 8;
+}
+
+static void
+init_fpc_ops (void)
+{
+  fpc_abi_ops.shortname = "fpc";
+  fpc_abi_ops.longname = "Free Pascal ABI";
+  fpc_abi_ops.doc = "Free Pascal v1.0 ABI";
+  fpc_abi_ops.is_destructor_name = fpc_is_destructor_name;
+  fpc_abi_ops.is_constructor_name = fpc_is_constructor_name;
+  fpc_abi_ops.is_vtable_name = fpc_is_vtable_name;
+  fpc_abi_ops.is_operator_name = fpc_is_operator_name;
+  fpc_abi_ops.virtual_fn_field = fpc_virtual_fn_field;
+  fpc_abi_ops.rtti_type = fpc_value_rtti_type;
+  fpc_abi_ops.baseclass_offset = fpc_baseclass_offset;
+}
+
+void
+_initialize_fpc_abi (void)
+{
+  init_fpc_ops ();
+  register_cp_abi (fpc_abi_ops);
+}
diff -u -p -r -N -x Entries origdb/gdbarch.c gdb/gdbarch.c
--- origdb/gdbarch.c	2003-02-14 16:44:49.000000000 +0100
+++ gdb/gdbarch.c	2003-02-14 16:46:33.000000000 +0100
@@ -137,6 +137,7 @@ struct gdbarch
   int float_bit;
   int double_bit;
   int long_double_bit;
+  int long_double_bit_alternate;
   int ptr_bit;
   int addr_bit;
   int bfd_vma_bit;
@@ -305,6 +306,7 @@ struct gdbarch startup_gdbarch =
   0,
   0,
   0,
+  0,
   -1,
   -1,
   -1,
@@ -468,6 +470,7 @@ gdbarch_alloc (const struct gdbarch_info
   current_gdbarch->float_bit = 4*TARGET_CHAR_BIT;
   current_gdbarch->double_bit = 8*TARGET_CHAR_BIT;
   current_gdbarch->long_double_bit = 8*TARGET_CHAR_BIT;
+  current_gdbarch->long_double_bit_alternate = 0;
   current_gdbarch->ptr_bit = TARGET_INT_BIT;
   current_gdbarch->bfd_vma_bit = TARGET_ARCHITECTURE->bits_per_address;
   current_gdbarch->char_signed = -1;
@@ -597,6 +600,7 @@ verify_gdbarch (struct gdbarch *gdbarch)
   /* Skip verify of float_bit, invalid_p == 0 */
   /* Skip verify of double_bit, invalid_p == 0 */
   /* Skip verify of long_double_bit, invalid_p == 0 */
+  /* Skip verify of long_double_bit_alternate, invalid_p == 0 */
   /* Skip verify of ptr_bit, invalid_p == 0 */
   if (gdbarch->addr_bit == 0)
     gdbarch->addr_bit = TARGET_PTR_BIT;
@@ -2072,6 +2076,14 @@ gdbarch_dump (struct gdbarch *gdbarch, s
                       "gdbarch_dump: TARGET_LONG_DOUBLE_BIT = %d\n",
                       TARGET_LONG_DOUBLE_BIT);
 #endif
+#ifdef TARGET_LONG_DOUBLE_BIT_ALTERNATE
+  fprintf_unfiltered (file,
+                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT_ALTERNATE # %s\n",
+                      XSTRING (TARGET_LONG_DOUBLE_BIT_ALTERNATE));
+  fprintf_unfiltered (file,
+                      "gdbarch_dump: TARGET_LONG_DOUBLE_BIT_ALTERNATE = %d\n",
+                      TARGET_LONG_DOUBLE_BIT_ALTERNATE);
+#endif
 #ifdef TARGET_LONG_DOUBLE_FORMAT
   fprintf_unfiltered (file,
                       "gdbarch_dump: TARGET_LONG_DOUBLE_FORMAT # %s\n",
@@ -2374,6 +2386,23 @@ set_gdbarch_long_double_bit (struct gdba
 }

 int
+gdbarch_long_double_bit_alternate (struct gdbarch *gdbarch)
+{
+  gdb_assert (gdbarch != NULL);
+  /* Skip verify of long_double_bit_alternate, invalid_p == 0 */
+  if (gdbarch_debug >= 2)
+    fprintf_unfiltered (gdb_stdlog, "gdbarch_long_double_bit_alternate called\n");
+  return gdbarch->long_double_bit_alternate;
+}
+
+void
+set_gdbarch_long_double_bit_alternate (struct gdbarch *gdbarch,
+                                       int long_double_bit_alternate)
+{
+  gdbarch->long_double_bit_alternate = long_double_bit_alternate;
+}
+
+int
 gdbarch_ptr_bit (struct gdbarch *gdbarch)
 {
   gdb_assert (gdbarch != NULL);
diff -u -p -r -N -x Entries origdb/gdbarch.h gdb/gdbarch.h
--- origdb/gdbarch.h	2003-02-14 16:44:49.000000000 +0100
+++ gdb/gdbarch.h	2003-02-14 16:46:33.000000000 +0100
@@ -240,6 +240,24 @@ extern void set_gdbarch_long_double_bit
    ptr_bit is the size of a pointer on the target */

 /* Default (value) for non- multi-arch platforms. */
+/* Alternate number of bits in a long double for the target machine. */
+
+/* Default (value) for non- multi-arch platforms. */
+#if (!GDB_MULTI_ARCH) && !defined (TARGET_LONG_DOUBLE_BIT_ALTERNATE)
+#define TARGET_LONG_DOUBLE_BIT_ALTERNATE (8*TARGET_CHAR_BIT)
+#endif
+
+extern int gdbarch_long_double_bit_alternate (struct gdbarch *gdbarch);
+extern void set_gdbarch_long_double_bit_alternate (struct gdbarch *gdbarch, int long_double_bit_alternate);
+#if (GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL) && defined (TARGET_LONG_DOUBLE_BIT_ALTERNATE)
+#error "Non multi-arch definition of TARGET_LONG_DOUBLE_BIT_ALTERNATE"
+#endif
+#if GDB_MULTI_ARCH
+#if (GDB_MULTI_ARCH > GDB_MULTI_ARCH_PARTIAL) || !defined (TARGET_LONG_DOUBLE_BIT_ALTERNATE)
+#define TARGET_LONG_DOUBLE_BIT_ALTERNATE (gdbarch_long_double_bit_alternate (current_gdbarch))
+#endif
+#endif
+
 #if (!GDB_MULTI_ARCH) && !defined (TARGET_PTR_BIT)
 #define TARGET_PTR_BIT (TARGET_INT_BIT)
 #endif
@@ -2207,7 +2225,7 @@ extern void set_gdbarch_addr_bits_remove
 #endif
 #endif

-/* It is not at all clear why SMASH_TEXT_ADDRESS is not folded into
+/* It is not at all clear why SMASH_TEXT_ADDRESS is not folded into
    ADDR_BITS_REMOVE. */

 /* Default (function) for non- multi-arch platforms. */
diff -u -p -r -N -x Entries origdb/gdbarch.sh gdb/gdbarch.sh
--- origdb/gdbarch.sh	2003-02-14 16:44:49.000000000 +0100
+++ gdb/gdbarch.sh	2003-02-14 16:46:33.000000000 +0100
@@ -400,6 +400,8 @@ v::TARGET_FLOAT_BIT:int:float_bit::::8 *
 v::TARGET_DOUBLE_BIT:int:double_bit::::8 * sizeof (double):8*TARGET_CHAR_BIT::0
 # Number of bits in a long double for the target machine.
 v::TARGET_LONG_DOUBLE_BIT:int:long_double_bit::::8 * sizeof (long double):8*TARGET_CHAR_BIT::0
+# Alternate number of bits in a long double for the target machine.
+v:2:TARGET_LONG_DOUBLE_BIT_ALTERNATE:int:long_double_bit_alternate::::0:0::0
 # For most targets, a pointer on the target and its representation as an
 # address in GDB have the same size and "look the same".  For such a
 # target, you need only set TARGET_PTR_BIT / ptr_bit and TARGET_ADDR_BIT
diff -u -p -r -N -x Entries origdb/i386-tdep.c gdb/i386-tdep.c
--- origdb/i386-tdep.c	Mon Aug 26 20:35:25 2002
+++ gdb/i386-tdep.c	Thu Dec 12 15:47:04 2002
@@ -708,6 +708,8 @@ i386_skip_prologue (CORE_ADDR pc)
 {
   unsigned char op;
   int i;
+  CORE_ADDR last_push_esi_pos = 0;
+
   static unsigned char pic_pat[6] =
   { 0xe8, 0, 0, 0, 0,		/* call   0x0 */
     0x5b,			/* popl   %ebx */
@@ -727,7 +729,9 @@ i386_skip_prologue (CORE_ADDR pc)
       /* Break if not `pushl' instrunction.  */
       if (op < 0x50 || op > 0x57)
 	break;
-      codestream_get ();
+      if (op == 0x56)
+	last_push_esi_pos = codestream_tell ();
+      codestream_get();
     }

   /* The native cc on SVR4 in -K PIC mode inserts the following code
@@ -783,7 +787,10 @@ i386_skip_prologue (CORE_ADDR pc)

   i386_follow_jump ();

-  return (codestream_tell ());
+  if (codestream_tell () == last_push_esi_pos + 1)
+    return (last_push_esi_pos);
+  else
+    return (codestream_tell ());
 }

 /* Use the program counter to determine the contents and size of a
@@ -1464,6 +1471,7 @@ i386_gdbarch_init (struct gdbarch_info i
      bits, a `long double' actually takes up 96, probably to enforce
      alignment.  */
   set_gdbarch_long_double_bit (gdbarch, 96);
+  set_gdbarch_long_double_bit_alternate (gdbarch, 80);

   /* NOTE: tm-i386aix.h, tm-i386bsd.h, tm-i386os9k.h, tm-ptx.h,
      tm-symmetry.h currently override this.  Sigh.  */
diff -u -p -r -N -x Entries origdb/minsyms.c gdb/minsyms.c
--- origdb/minsyms.c	Thu Jul 11 22:46:19 2002
+++ gdb/minsyms.c	Thu Dec 12 15:47:04 2002
@@ -912,6 +912,12 @@ install_minimal_symbols (struct objfile
 	for (i = 0; i < mcount; i++)
 	  {
 	    const char *name = SYMBOL_NAME (&objfile->msymbols[i]);
+	    if (strcmp (name, "fpc_compiled") == 0)
+	      {
+		switch_to_cp_abi ("fpc");
+		break;
+	      }
+
 	    if (name[0] == '_' && name[1] == 'Z')
 	      {
 		switch_to_cp_abi ("gnu-v3");
diff -u -p -r -N -x Entries origdb/p-exp.y gdb/p-exp.y
--- origdb/p-exp.y	Wed Nov 13 16:44:16 2002
+++ gdb/p-exp.y	Thu Dec 12 15:47:04 2002
@@ -294,7 +294,9 @@ exp	:	exp '.' { search_field = 1; }
 				current_type = TYPE_TARGET_TYPE (current_type);
 			      current_type = lookup_struct_elt_type (
 				current_type, $4.ptr, false); };
-			 } ;
+			 }
+	;
+
 exp	:	exp '['
 			/* We need to save the current_type value */
 			{ char *arrayname;
@@ -322,8 +324,7 @@ exp	:	exp '['
 			    current_type = TYPE_TARGET_TYPE (current_type); }
 	;

-exp	:	exp '('
-			/* This is to save the value of arglist_len
+exp	:	exp '(' /* This is to save the value of arglist_len
 			   being accumulated by an outer function call.  */
 			{ push_current_type ();
 			  start_arglist (); }
@@ -1479,6 +1480,17 @@ yylex ()
 	yylval.sval.length = namelen;
 	return FIELDNAME;
       }
+
+    /* if not found uppercase the whole.  */
+    if (!sym && !is_a_field_of_this)
+      {
+	for (i = 0; i <= namelen; i++)
+	  {
+	    if ((tokstart[i] >= 'a' && tokstart[i] <= 'z'))
+	      tokstart[i] -= ('a'-'A');
+	  }
+      }
+
     /* Call lookup_symtab, not lookup_partial_symtab, in case there are
        no psymtabs (coff, xcoff, or some future change to blow away the
        psymtabs once once symbols are read).  */
diff -u -p -r -N -x Entries origdb/top.c gdb/top.c
--- origdb/top.c	Sat Sep 28 17:10:32 2002
+++ gdb/top.c	Thu Dec 12 15:47:04 2002
@@ -1353,7 +1353,7 @@ print_gdb_version (struct ui_file *strea
      program to parse, and is just canonical program name and version
      number, which starts after last space. */

-  fprintf_filtered (stream, "GNU gdb %s\n", version);
+  fprintf_filtered (stream, "GNU gdb %s adapted to Free Pascal\n", version);

   /* Second line is a copyright notice. */

diff -u -p -r -N -x Entries origdb/gdbserver/linux-m68k-low.c gdb/gdbserver/linux-m68k-low.c
--- origdb/gdbserver/linux-m68k-low.c	2002-04-10 00:44:43.000000000 +0200
+++ gdb/gdbserver/linux-m68k-low.c	2002-12-13 09:58:17.000000000 +0100
@@ -26,7 +26,7 @@
 #include <sys/reg.h>
 #endif

-#define m68k_num_regs 31
+#define m68k_num_regs 29

 /* This table must line up with REGISTER_NAMES in tm-m68k.h */
 static int m68k_regmap[] =
diff -u -p -r -N -x Entries origdb/regformats/reg-m68k.dat gdb/regformats/reg-m68k.dat
--- origdb/regformats/reg-m68k.dat	2002-02-01 23:05:28.000000000 +0100
+++ gdb/regformats/reg-m68k.dat	2002-12-13 09:57:33.000000000 +0100
@@ -31,5 +31,3 @@ expedite:sp,fp,pc
 32:fpcontrol
 32:fpstatus
 32:fpiaddr
-32:fpcode
-32:fpflags
diff -u -p -r -N -x Entries origdb/config/m68k/linux.mt gdb/config/m68k/linux.mt
--- origdb/config/m68k/linux.mt	2001-03-10 07:17:22.000000000 +0100
+++ gdb/config/m68k/linux.mt	2002-12-13 10:55:03.000000000 +0100
@@ -1,3 +1,3 @@
 # Target: Motorola m68k with a.out and ELF
-TDEPFILES= m68k-tdep.o solib.o solib-svr4.o solib-legacy.o
+TDEPFILES= m68k-tdep.o m68klinux-tdep.o solib.o solib-svr4.o solib-legacy.o
 TM_FILE= tm-linux.h
diff -u -p -r -N -x Entries origdb/m68klinux-nat.c gdb/m68klinux-nat.c
--- origdb/m68klinux-nat.c	2002-07-11 15:50:49.000000000 +0200
+++ gdb/m68klinux-nat.c	2002-12-13 10:53:59.000000000 +0100
@@ -594,102 +594,7 @@ kernel_u_size (void)
   return (sizeof (struct user));
 }
 
-/* Check whether insn1 and insn2 are parts of a signal trampoline.  */

-#define IS_SIGTRAMP(insn1, insn2)					\
-  (/* addaw #20,sp; moveq #119,d0; trap #0 */				\
-   (insn1 == 0xdefc0014 && insn2 == 0x70774e40)				\
-   /* moveq #119,d0; trap #0 */						\
-   || insn1 == 0x70774e40)
-
-#define IS_RT_SIGTRAMP(insn1, insn2)					\
-  (/* movel #173,d0; trap #0 */						\
-   (insn1 == 0x203c0000 && insn2 == 0x00ad4e40)				\
-   /* moveq #82,d0; notb d0; trap #0 */					\
-   || (insn1 == 0x70524600 && (insn2 >> 16) == 0x4e40))
-
-/* Return non-zero if PC points into the signal trampoline.  For the sake
-   of m68k_linux_frame_saved_pc we also distinguish between non-RT and RT
-   signal trampolines.  */
-
-int
-m68k_linux_in_sigtramp (CORE_ADDR pc)
-{
-  CORE_ADDR sp;
-  char buf[12];
-  unsigned long insn0, insn1, insn2;
-
-  if (read_memory_nobpt (pc - 4, buf, sizeof (buf)))
-    return 0;
-  insn1 = extract_unsigned_integer (buf + 4, 4);
-  insn2 = extract_unsigned_integer (buf + 8, 4);
-  if (IS_SIGTRAMP (insn1, insn2))
-    return 1;
-  if (IS_RT_SIGTRAMP (insn1, insn2))
-    return 2;
-
-  insn0 = extract_unsigned_integer (buf, 4);
-  if (IS_SIGTRAMP (insn0, insn1))
-    return 1;
-  if (IS_RT_SIGTRAMP (insn0, insn1))
-    return 2;
-
-  insn0 = (insn0 << 16) | (insn1 >> 16);
-  insn1 = (insn1 << 16) | (insn2 >> 16);
-  if (IS_SIGTRAMP (insn0, insn1))
-    return 1;
-  if (IS_RT_SIGTRAMP (insn0, insn1))
-    return 2;
-
-  return 0;
-}
-
-/* Offset to saved PC in sigcontext, from <asm/sigcontext.h>.  */
-#define SIGCONTEXT_PC_OFFSET 26
-
-/* Offset to saved PC in ucontext, from <asm/ucontext.h>.  */
-#define UCONTEXT_PC_OFFSET 88
-
-/* Get saved user PC for sigtramp from sigcontext or ucontext.  */
-
-static CORE_ADDR
-m68k_linux_sigtramp_saved_pc (struct frame_info *frame)
-{
-  CORE_ADDR sigcontext_addr;
-  char buf[TARGET_PTR_BIT / TARGET_CHAR_BIT];
-  int ptrbytes = TARGET_PTR_BIT / TARGET_CHAR_BIT;
-  int sigcontext_offs = (2 * TARGET_INT_BIT) / TARGET_CHAR_BIT;
-
-  /* Get sigcontext address, it is the third parameter on the stack.  */
-  if (frame->next)
-    sigcontext_addr = read_memory_integer (FRAME_ARGS_ADDRESS (frame->next)
-					   + FRAME_ARGS_SKIP
-					   + sigcontext_offs,
-					   ptrbytes);
-  else
-    sigcontext_addr = read_memory_integer (read_register (SP_REGNUM)
-					   + sigcontext_offs,
-					   ptrbytes);
-
-  /* Don't cause a memory_error when accessing sigcontext in case the
-     stack layout has changed or the stack is corrupt.  */
-  if (m68k_linux_in_sigtramp (frame->pc) == 2)
-    target_read_memory (sigcontext_addr + UCONTEXT_PC_OFFSET, buf, ptrbytes);
-  else
-    target_read_memory (sigcontext_addr + SIGCONTEXT_PC_OFFSET, buf, ptrbytes);
-  return extract_unsigned_integer (buf, ptrbytes);
-}
-
-/* Return the saved program counter for FRAME.  */
-
-CORE_ADDR
-m68k_linux_frame_saved_pc (struct frame_info *frame)
-{
-  if (frame->signal_handler_caller)
-    return m68k_linux_sigtramp_saved_pc (frame);
-
-  return read_memory_integer (frame->frame + 4, 4);
-}
 
 /* Register that we are able to handle GNU/Linux ELF core file
    formats.  */
diff -u -p -r -N -x Entries origdb/m68klinux-tdep.c gdb/m68klinux-tdep.c
--- origdb/m68klinux-tdep.c	1970-01-01 01:00:00.000000000 +0100
+++ gdb/m68klinux-tdep.c	2002-12-13 10:54:15.000000000 +0100
@@ -0,0 +1,127 @@
+/* Motorola m68k target-dependent support for GNU/Linux.
+
+   Copyright 1996, 1998, 2000, 2001, 2002 Free Software Foundation,
+   Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+#include "defs.h"
+#include "gdbcore.h"
+#include "frame.h"
+#include "target.h"
+
+
+
+/* Check whether insn1 and insn2 are parts of a signal trampoline.  */
+
+#define IS_SIGTRAMP(insn1, insn2)					\
+  (/* addaw #20,sp; moveq #119,d0; trap #0 */				\
+   (insn1 == 0xdefc0014 && insn2 == 0x70774e40)				\
+   /* moveq #119,d0; trap #0 */						\
+   || insn1 == 0x70774e40)
+
+#define IS_RT_SIGTRAMP(insn1, insn2)					\
+  (/* movel #173,d0; trap #0 */						\
+   (insn1 == 0x203c0000 && insn2 == 0x00ad4e40)				\
+   /* moveq #82,d0; notb d0; trap #0 */					\
+   || (insn1 == 0x70524600 && (insn2 >> 16) == 0x4e40))
+
+/* Return non-zero if PC points into the signal trampoline.  For the sake
+   of m68k_linux_frame_saved_pc we also distinguish between non-RT and RT
+   signal trampolines.  */
+
+int
+m68k_linux_in_sigtramp (CORE_ADDR pc)
+{
+  CORE_ADDR sp;
+  char buf[12];
+  unsigned long insn0, insn1, insn2;
+
+  if (read_memory_nobpt (pc - 4, buf, sizeof (buf)))
+    return 0;
+  insn1 = extract_unsigned_integer (buf + 4, 4);
+  insn2 = extract_unsigned_integer (buf + 8, 4);
+  if (IS_SIGTRAMP (insn1, insn2))
+    return 1;
+  if (IS_RT_SIGTRAMP (insn1, insn2))
+    return 2;
+
+  insn0 = extract_unsigned_integer (buf, 4);
+  if (IS_SIGTRAMP (insn0, insn1))
+    return 1;
+  if (IS_RT_SIGTRAMP (insn0, insn1))
+    return 2;
+
+  insn0 = (insn0 << 16) | (insn1 >> 16);
+  insn1 = (insn1 << 16) | (insn2 >> 16);
+  if (IS_SIGTRAMP (insn0, insn1))
+    return 1;
+  if (IS_RT_SIGTRAMP (insn0, insn1))
+    return 2;
+
+  return 0;
+}
+
+/* Offset to saved PC in sigcontext, from <asm/sigcontext.h>.  */
+#define SIGCONTEXT_PC_OFFSET 26
+
+/* Offset to saved PC in ucontext, from <asm/ucontext.h>.  */
+#define UCONTEXT_PC_OFFSET 88
+
+/* Get saved user PC for sigtramp from sigcontext or ucontext.  */
+
+static CORE_ADDR
+m68k_linux_sigtramp_saved_pc (struct frame_info *frame)
+{
+  CORE_ADDR sigcontext_addr;
+  char buf[TARGET_PTR_BIT / TARGET_CHAR_BIT];
+  int ptrbytes = TARGET_PTR_BIT / TARGET_CHAR_BIT;
+  int sigcontext_offs = (2 * TARGET_INT_BIT) / TARGET_CHAR_BIT;
+
+  /* Get sigcontext address, it is the third parameter on the stack.  */
+  if (frame->next)
+    sigcontext_addr = read_memory_integer (FRAME_ARGS_ADDRESS (frame->next)
+					   + FRAME_ARGS_SKIP
+					   + sigcontext_offs,
+					   ptrbytes);
+  else
+    sigcontext_addr = read_memory_integer (read_register (SP_REGNUM)
+					   + sigcontext_offs,
+					   ptrbytes);
+
+  /* Don't cause a memory_error when accessing sigcontext in case the
+     stack layout has changed or the stack is corrupt.  */
+  if (m68k_linux_in_sigtramp (frame->pc) == 2)
+    target_read_memory (sigcontext_addr + UCONTEXT_PC_OFFSET, buf, ptrbytes);
+  else
+    target_read_memory (sigcontext_addr + SIGCONTEXT_PC_OFFSET, buf, ptrbytes);
+  return extract_unsigned_integer (buf, ptrbytes);
+}
+
+/* Return the saved program counter for FRAME.  */
+
+CORE_ADDR
+m68k_linux_frame_saved_pc (struct frame_info *frame)
+{
+  if (frame->signal_handler_caller)
+    return m68k_linux_sigtramp_saved_pc (frame);
+
+  return read_memory_integer (frame->frame + 4, 4);
+}
+
+
